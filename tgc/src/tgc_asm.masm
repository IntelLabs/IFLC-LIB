;;; COPYRIGHT_NOTICE_1

.586
.xmm
.model flat, c

.code

EXTERN C unmanaged_add_entry : NEAR
EXTERN C unmanaged_add_entry_interior : NEAR
IFDEF CONCURRENT
EXTERN C unmanaged_mark_phase : NEAR
ENDIF
EXTERN C prtInvokeUnmanagedFunc@16 : NEAR
EXTERN C prtFatCutTo@4 : NEAR
EXTERN C add_gen_rs    : NEAR
EXTERN C global_is_in_heap : NEAR

EXTERN C g_tls_offset_bytes : DWORD
EXTERN C local_nursery_size : DWORD
EXTERN C g_use_pub_priv     : DWORD

_TEXT SEGMENT

; -----------------------------------------------------------------------

PUBLIC gc_heap_slot_write_ref_p@12
PUBLIC gc_heap_slot_write_ref_p_nonconcurrent_section
PUBLIC gc_heap_slot_write_ref_p_end
gc_heap_slot_write_ref_p@12 PROC EXPORT
    mov  eax, dword ptr [esp+8]       ; // p_slot into eax

    mov  ecx, ebx                     ; // Pillar task * into ecx
IFNDEF TLS0
    add  ecx, 4                       ; // Go to TLS field in PrtTask
ENDIF ; TLS0
    mov  ecx, dword ptr [ecx]         ; // TLS value (GC_Thread_Info*) into ecx
    add  ecx, g_tls_offset_bytes

    ; // return if slot is inside the nursery
    sub  eax, dword ptr [ecx+8]       ; // ecx+8 is the start field in local nursery
    cmp  eax, local_nursery_size      ; // go to done if p_slot is in the local nursery
    jb   done

    mov  eax, dword ptr [esp+12]      ; // value into eax
    and  eax, 3                       ; // check if this is normal pointer (two lower bits 0) or a tagged pointer
    cmp  eax, 0                       ; // compare two lower bits against zero
    jnz  done                         ; // if one of them isn't zero it is a tagged rational and no barrier needed for these

IFDEF CONCURRENT
    lea  edx, dword ptr [esp+12]      ; // pointer to new value in edx
    mov  eax, dword ptr [esp+8]       ; // p_slot into eax

    push eax
    push 0                           ; // non-interior so offset of 0
    push edx
    push ecx

    mov  eax, esp
    push 0
    push 4                           ; // 4 args
    push eax
    lea  eax, unmanaged_mark_phase
    push eax
    call prtInvokeUnmanagedFunc@16
    add  esp, 16

    ret 12
ENDIF ; CONCURRENT
gc_heap_slot_write_ref_p_nonconcurrent_section::

IFDEF PUB_PRIV
    mov  edx, dword ptr [esp+12]       ; // new value into edx
    cmp  edx, 0
    jz   done                          ; // if new value is NULL then jump to where the value is written.
    mov  edx, dword ptr g_use_pub_priv ; // if g_use_pub_priv is on then unmanaged call is necessary
    cmp  edx, 0
    jnz  do_unmanaged_check
ENDIF ; PUB_PRIV

    mov  edx, dword ptr [esp+12]      ; // value into edx
    ; // return if value is outside the nursery
    sub  edx, dword ptr [ecx+8]
    cmp  edx, local_nursery_size
    jae  done

do_unmanaged_check:
    lea  edx, [esp+12]
    mov  eax, dword ptr [esp+8]
    push eax                          ; // push the p_slot
    mov  eax, dword ptr [esp+8]
    push eax                          ; // push the base
    push edx                          ; // push a pointer to the value
    push ecx                          ; // push the GC thread

    mov  eax, esp
    push 0
    push 4
    push eax
    mov  eax, unmanaged_add_entry
    push eax
    call prtInvokeUnmanagedFunc@16
    add  esp, 16                      ; // pop the args pushed above

done:
    ; // write value into *p_slot
    mov  eax, dword ptr [esp+8]       ; // p_slot into eax
    mov  edx, dword ptr [esp+12]      ; // value into edx
    mov  dword ptr [eax], edx         ; // *p_slot = value

    ret  12
gc_heap_slot_write_ref_p_end::
gc_heap_slot_write_ref_p@12 ENDP

; -----------------------------------------------------------------------

PUBLIC gc_heap_slot_write_interior_ref_p@12
PUBLIC gc_heap_slot_write_interior_ref_p_nonconcurrent_section
PUBLIC gc_heap_slot_write_interior_ref_p_end
gc_heap_slot_write_interior_ref_p@12 PROC EXPORT
    mov eax, dword ptr [esp+4]       ; // p_slot into eax

    mov ecx, ebx                     ; // Pillar task * into ecx
IFNDEF TLS0
    add ecx, 4                       ; // Go to TLS field in PrtTask
ENDIF ; TLS0
    mov ecx, dword ptr [ecx]         ; // TLS value (GC_Thread_Info*) into ecx
    add ecx, g_tls_offset_bytes

    ; // return if slot is inside the nursery
    sub eax, dword ptr [ecx+8]                ; // ecx+8 is the start field in local nursery
    cmp eax, local_nursery_size   ; // go to done if p_slot is in the local nursery
    jb interior_done

IFDEF CONCURRENT
    mov eax, dword ptr [esp+4]      ; // p_slot into eax
    lea edx, dword ptr [esp+8]      ; // value into edx

    push eax
    mov eax, dword ptr [esp+16]     ; // offset
    push eax
    push edx
    push ecx

    mov eax, esp
    push 0
    push 4
    push eax
    lea eax, unmanaged_mark_phase
    push eax
    call prtInvokeUnmanagedFunc@16
    add esp, 16

    ret 12
ENDIF ; CONCURRENT
gc_heap_slot_write_interior_ref_p_nonconcurrent_section::

    mov edx, dword ptr [esp+8]      ; // value into edx
    ; // return if value is outside the nursery
    sub edx, dword ptr [ecx+8]
    cmp edx, local_nursery_size
    jae interior_done

    lea edx, [esp+8]
    push dword ptr [esp+12]
    push edx
    push ecx

    mov eax, esp
    push 0
    push 3
    push eax
    mov eax, unmanaged_add_entry_interior
    push eax
    call prtInvokeUnmanagedFunc@16
    add esp, 12
interior_done:
    ; // write value into *p_slot
    mov eax, dword ptr [esp+4]       ; // p_slot into eax
    mov edx, dword ptr [esp+8]       ; // value into edx
    mov dword ptr [eax], edx         ; // *p_slot = value
    ret 12
gc_heap_slot_write_interior_ref_p_end::
gc_heap_slot_write_interior_ref_p@12 ENDP

; -----------------------------------------------------------------------

PUBLIC gc_heap_slot_write_ref_p_prt@20
PUBLIC gc_heap_slot_write_ref_p_prt_nonconcurrent_section
PUBLIC gc_heap_slot_write_ref_p_prt_end
gc_heap_slot_write_ref_p_prt@20 PROC EXPORT
    mov eax, dword ptr [esp+8]       ; // p_slot into eax

    mov ecx, dword ptr [esp+16]      ; // Pillar task * into ecx
IFNDEF TLS0
    add ecx, 4                       ; // Go to TLS field in PrtTask
ENDIF ; TLS0
    mov ecx, dword ptr [ecx]         ; // TLS value (GC_Thread_Info*) into ecx
    add ecx, g_tls_offset_bytes

    ; // return if slot is inside the nursery
    sub  eax, dword ptr [ecx+8]      ; // ecx+8 is the start field in local nursery
    cmp  eax, local_nursery_size     ; // go to done if p_slot is in the local nursery
    jb   done

    mov  eax, dword ptr [esp+12]     ; // value into eax
    and  eax, 3                      ; // check if this is normal pointer (two lower bits 0) or a tagged pointer
    cmp  eax, 0                      ; // compare two lower bits against zero
    jnz  done                        ; // if one of them isn't zero it is a tagged rational and no barrier needed for these

IFDEF CONCURRENT
    lea  edx, dword ptr [esp+12]     ; // pointer to new value in edx
    mov  eax, dword ptr [esp+8]      ; // p_slot into eax

    push ebx                         ; // save ebx
    mov  ebx, dword ptr [esp+20]     ; // Pillar task * into ebx
    push eax
    push 0                           ; // non-interior so offset of 0
    push edx
    push ecx

    mov eax, esp
    push 0
    push 4                           ; // 4 args
    push eax
    lea  eax, unmanaged_mark_phase
    push eax
    call prtInvokeUnmanagedFunc@16
    add  esp, 16
    pop  ebx                         ; // restore ebx

    ret 20
ENDIF ; CONCURRENT
gc_heap_slot_write_ref_p_prt_nonconcurrent_section::

IFDEF PUB_PRIV
    mov  edx, dword ptr [esp+12]       ; // new value into edx
    cmp  edx, 0
    jz   done                          ; // if new value is NULL then jump to where the value is written.
    mov  edx, dword ptr g_use_pub_priv ; // if g_use_pub_priv is on then unmanaged call is necessary
    cmp  edx, 0
    jnz  do_unmanaged_check_prt
ENDIF ; PUB_PRIV

    mov edx, dword ptr [esp+12]      ; // value into edx
    ; // return if value is outside the nursery
    sub edx, dword ptr [ecx+8]
    cmp edx, local_nursery_size
    jae done

do_unmanaged_check_prt:
    push ebx                          ; // save ebx
    mov  ebx, dword ptr [esp+20]      ; // Pillar task * into ebx
    lea  edx, [esp+16]
    mov  eax, dword ptr [esp+12]
    push eax                          ; // push the p_slot
    mov  eax, dword ptr [esp+12]
    push eax                          ; // push the base
    push edx                          ; // push a pointer to the value
    push ecx                          ; // push the GC thread

    mov eax, esp
    push 0
    push 4
    push eax
    mov eax, unmanaged_add_entry
    push eax
    call prtInvokeUnmanagedFunc@16
    add  esp, 16
    pop  ebx

done:
    ; // write value into *p_slot
    mov eax, dword ptr [esp+8]       ; // p_slot into eax
    mov edx, dword ptr [esp+12]      ; // value into edx
    mov dword ptr [eax], edx         ; // *p_slot = value

    ret 20
gc_heap_slot_write_ref_p_prt_end::
gc_heap_slot_write_ref_p_prt@20 ENDP

; -----------------------------------------------------------------------

PUBLIC gc_heap_slot_write_interior_ref_p_prt@20
PUBLIC gc_heap_slot_write_interior_ref_p_prt_nonconcurrent_section
PUBLIC gc_heap_slot_write_interior_ref_p_prt_end
gc_heap_slot_write_interior_ref_p_prt@20 PROC EXPORT
    mov eax, dword ptr [esp+4]       ; // p_slot into eax

    mov ecx, dword ptr [esp+16]      ; // Pillar task * into ecx
IFNDEF TLS0
    add ecx, 4                      ; // Go to TLS field in PrtTask
ENDIF ; TLS0
    mov ecx, dword ptr [ecx]        ; // TLS value (GC_Thread_Info*) into ecx
    add ecx, g_tls_offset_bytes

    ; // return if slot is inside the nursery
    sub  eax, dword ptr [ecx+8]     ; // ecx+8 is the start field in local nursery
    cmp  eax, local_nursery_size    ; // go to done if p_slot is in the local nursery
    jb   interior_done

IFDEF CONCURRENT
    mov  eax, dword ptr [esp+4]     ; // p_slot into eax
    lea  edx, dword ptr [esp+8]     ; // value into edx

    push ebx                        ; // save ebx
    mov  ebx, dword ptr [esp+20]    ; // Pillar task * into ebx
    push eax
    mov  eax, dword ptr [esp+20]    ; // offset
    push eax
    push edx
    push ecx

    mov  eax, esp
    push 0
    push 4
    push eax
    lea  eax, unmanaged_mark_phase
    push eax
    call prtInvokeUnmanagedFunc@16
    add  esp, 16
    pop  ebx

    ret 20
ENDIF ; CONCURRENT
gc_heap_slot_write_interior_ref_p_prt_nonconcurrent_section::

    mov  edx, dword ptr [esp+8]       ; // value into edx
    ; // return if value is outside the nursery
    sub  edx, dword ptr [ecx+8]
    cmp  edx, local_nursery_size
    jae  interior_done

    push ebx                          ; // save ebx
    mov  ebx, dword ptr [esp+20]      ; // Pillar task * into ebx
    lea  edx, [esp+12]
    push dword ptr [esp+16]
    push edx
    push ecx

    mov  eax, esp
    push 0
    push 3
    push eax
    mov  eax, unmanaged_add_entry_interior
    push eax
    call prtInvokeUnmanagedFunc@16
    add  esp, 12
    pop  ebx
interior_done:
    ; // write value into *p_slot
    mov  eax, dword ptr [esp+4]       ; // p_slot into eax
    mov  edx, dword ptr [esp+8]       ; // value into edx
    mov  dword ptr [eax], edx         ; // *p_slot = value
    ret  20
gc_heap_slot_write_interior_ref_p_prt_end::
gc_heap_slot_write_interior_ref_p_prt@20 ENDP




















; -----------------------------------------------------------------------
; -------------------------- CAS versions -------------------------------
; -----------------------------------------------------------------------

PUBLIC gc_cas_write_ref_p@16
PUBLIC gc_cas_write_ref_p_nonconcurrent_section
PUBLIC gc_cas_write_ref_p_end
gc_cas_write_ref_p@16 PROC EXPORT
    mov  eax, dword ptr [esp+8]       ; // p_slot into eax

    mov  ecx, ebx                     ; // Pillar task * into ecx
IFNDEF TLS0
    add  ecx, 4                       ; // Go to TLS field in PrtTask
ENDIF ; TLS0
    mov  ecx, dword ptr [ecx]         ; // TLS value (GC_Thread_Info*) into ecx
    add  ecx, g_tls_offset_bytes

    ; // return if slot is inside the nursery
    sub  eax, dword ptr [ecx+8]       ; // ecx+8 is the start field in local nursery
    cmp  eax, local_nursery_size      ; // go to done if p_slot is in the local nursery
    jb   done

    mov  eax, dword ptr [esp+12]      ; // value into eax
    and  eax, 3                       ; // check if this is normal pointer (two lower bits 0) or a tagged pointer
    cmp  eax, 0                       ; // compare two lower bits against zero
    jnz  done                         ; // if one of them isn't zero it is a tagged rational and no barrier needed for these

IFDEF CONCURRENT
    lea  edx, dword ptr [esp+12]      ; // pointer to new value in edx
    mov  eax, dword ptr [esp+8]       ; // p_slot into eax

    push eax
    push 0                           ; // non-interior so offset of 0
    push edx
    push ecx

    mov  eax, esp
    push 0
    push 4                           ; // 4 args
    push eax
    lea  eax, unmanaged_mark_phase
    push eax
    call prtInvokeUnmanagedFunc@16
    add  esp, 16

    ret 16
ENDIF ; CONCURRENT
gc_cas_write_ref_p_nonconcurrent_section::

IFDEF PUB_PRIV
    mov  edx, dword ptr [esp+12]       ; // new value into edx
    cmp  edx, 0
    jz   done                          ; // if new value is NULL then jump to where the value is written.
    mov  edx, dword ptr g_use_pub_priv ; // if g_use_pub_priv is on then unmanaged call is necessary
    cmp  edx, 0
    jnz  do_unmanaged_check
ENDIF ; PUB_PRIV

    mov  edx, dword ptr [esp+12]      ; // value into edx
    ; // return if value is outside the nursery
    sub  edx, dword ptr [ecx+8]
    cmp  edx, local_nursery_size
    jae  done

do_unmanaged_check:
    lea  edx, [esp+12]
    mov  eax, dword ptr [esp+8]
    push eax                          ; // push the p_slot
    mov  eax, dword ptr [esp+8]
    push eax                          ; // push the base
    push edx                          ; // push a pointer to the value
    push ecx                          ; // push the GC thread

    mov  eax, esp
    push 0
    push 4
    push eax
    mov  eax, unmanaged_add_entry
    push eax
    call prtInvokeUnmanagedFunc@16
    add  esp, 16                      ; // pop the args pushed above

done:
    ; // write value into *p_slot
    mov  ecx, dword ptr [esp+8]       ; // p_slot into ecx
    mov  edx, dword ptr [esp+12]      ; // value into edx
    mov  eax, dword ptr [esp+16]      ; // comperand into eax
    lock cmpxchg [ecx], edx

    ret  16
gc_cas_write_ref_p_end::
gc_cas_write_ref_p@16 ENDP

; -----------------------------------------------------------------------

PUBLIC gc_cas_write_interior_ref_p@16
PUBLIC gc_cas_write_interior_ref_p_nonconcurrent_section
PUBLIC gc_cas_write_interior_ref_p_end
gc_cas_write_interior_ref_p@16 PROC EXPORT
    mov eax, dword ptr [esp+4]       ; // p_slot into eax

    mov ecx, ebx                     ; // Pillar task * into ecx
IFNDEF TLS0
    add ecx, 4                       ; // Go to TLS field in PrtTask
ENDIF ; TLS0
    mov ecx, dword ptr [ecx]         ; // TLS value (GC_Thread_Info*) into ecx
    add ecx, g_tls_offset_bytes

    ; // return if slot is inside the nursery
    sub eax, dword ptr [ecx+8]                ; // ecx+8 is the start field in local nursery
    cmp eax, local_nursery_size   ; // go to done if p_slot is in the local nursery
    jb interior_done

IFDEF CONCURRENT
    mov eax, dword ptr [esp+4]      ; // p_slot into eax
    lea edx, dword ptr [esp+8]      ; // value into edx

    push eax
    mov eax, dword ptr [esp+16]     ; // offset
    push eax
    push edx
    push ecx

    mov eax, esp
    push 0
    push 4
    push eax
    lea eax, unmanaged_mark_phase
    push eax
    call prtInvokeUnmanagedFunc@16
    add esp, 16

    ret 16
ENDIF ; CONCURRENT
gc_cas_write_interior_ref_p_nonconcurrent_section::

    mov edx, dword ptr [esp+8]      ; // value into edx
    ; // return if value is outside the nursery
    sub edx, dword ptr [ecx+8]
    cmp edx, local_nursery_size
    jae interior_done

    lea edx, [esp+8]
    push dword ptr [esp+12]
    push edx
    push ecx

    mov eax, esp
    push 0
    push 3
    push eax
    mov eax, unmanaged_add_entry_interior
    push eax
    call prtInvokeUnmanagedFunc@16
    add esp, 12
interior_done:
    ; // write value into *p_slot
    mov  ecx, dword ptr [esp+4]       ; // p_slot into ecx
    mov  edx, dword ptr [esp+8]       ; // value into edx
    mov  eax, dword ptr [esp+16]      ; // comperand into eax
    lock cmpxchg [ecx], edx

    ret 16
gc_cas_write_interior_ref_p_end::
gc_cas_write_interior_ref_p@16 ENDP

; -----------------------------------------------------------------------

PUBLIC gc_cas_write_ref_p_prt@24
PUBLIC gc_cas_write_ref_p_prt_nonconcurrent_section
PUBLIC gc_cas_write_ref_p_prt_end
gc_cas_write_ref_p_prt@24 PROC EXPORT
    mov eax, dword ptr [esp+8]       ; // p_slot into eax

    mov ecx, dword ptr [esp+20]      ; // Pillar task * into ecx
IFNDEF TLS0
    add ecx, 4                       ; // Go to TLS field in PrtTask
ENDIF ; TLS0
    mov ecx, dword ptr [ecx]         ; // TLS value (GC_Thread_Info*) into ecx
    add ecx, g_tls_offset_bytes

    ; // return if slot is inside the nursery
    sub  eax, dword ptr [ecx+8]      ; // ecx+8 is the start field in local nursery
    cmp  eax, local_nursery_size     ; // go to done if p_slot is in the local nursery
    jb   done

    mov  eax, dword ptr [esp+12]     ; // value into eax
    and  eax, 3                      ; // check if this is normal pointer (two lower bits 0) or a tagged pointer
    cmp  eax, 0                      ; // compare two lower bits against zero
    jnz  done                        ; // if one of them isn't zero it is a tagged rational and no barrier needed for these

IFDEF CONCURRENT
    lea  edx, dword ptr [esp+12]     ; // pointer to new value in edx
    mov  eax, dword ptr [esp+8]      ; // p_slot into eax

    push ebx                         ; // save ebx
    mov  ebx, dword ptr [esp+24]     ; // Pillar task * into ebx
    push eax
    push 0                           ; // non-interior so offset of 0
    push edx
    push ecx

    mov eax, esp
    push 0
    push 4                           ; // 4 args
    push eax
    lea  eax, unmanaged_mark_phase
    push eax
    call prtInvokeUnmanagedFunc@16
    add  esp, 16
    pop  ebx                         ; // restore ebx

    ret 24
ENDIF ; CONCURRENT
gc_cas_write_ref_p_prt_nonconcurrent_section::

IFDEF PUB_PRIV
    mov  edx, dword ptr [esp+12]       ; // new value into edx
    cmp  edx, 0
    jz   done                          ; // if new value is NULL then jump to where the value is written.
    mov  edx, dword ptr g_use_pub_priv ; // if g_use_pub_priv is on then unmanaged call is necessary
    cmp  edx, 0
    jnz  do_unmanaged_check_prt
ENDIF ; PUB_PRIV

    mov edx, dword ptr [esp+12]      ; // value into edx
    ; // return if value is outside the nursery
    sub edx, dword ptr [ecx+8]
    cmp edx, local_nursery_size
    jae done

do_unmanaged_check_prt:
    push ebx                          ; // save ebx
    mov  ebx, dword ptr [esp+24]      ; // Pillar task * into ebx
    lea  edx, [esp+16]
    mov  eax, dword ptr [esp+12]
    push eax                          ; // push the p_slot
    mov  eax, dword ptr [esp+12]
    push eax                          ; // push the base
    push edx                          ; // push a pointer to the value
    push ecx                          ; // push the GC thread

    mov eax, esp
    push 0
    push 4
    push eax
    mov eax, unmanaged_add_entry
    push eax
    call prtInvokeUnmanagedFunc@16
    add  esp, 16
    pop  ebx

done:
    ; // write value into *p_slot
    mov  ecx, dword ptr [esp+8]       ; // p_slot into ecx
    mov  edx, dword ptr [esp+12]      ; // value into edx
    mov  eax, dword ptr [esp+16]      ; // comperand into eax
    lock cmpxchg [ecx], edx

    ret 24
gc_cas_write_ref_p_prt_end::
gc_cas_write_ref_p_prt@24 ENDP

; -----------------------------------------------------------------------

PUBLIC gc_cas_write_interior_ref_p_prt@24
PUBLIC gc_cas_write_interior_ref_p_prt_nonconcurrent_section
PUBLIC gc_cas_write_interior_ref_p_prt_end
gc_cas_write_interior_ref_p_prt@24 PROC EXPORT
    mov eax, dword ptr [esp+4]       ; // p_slot into eax

    mov ecx, dword ptr [esp+20]      ; // Pillar task * into ecx
IFNDEF TLS0
    add ecx, 4                      ; // Go to TLS field in PrtTask
ENDIF ; TLS0
    mov ecx, dword ptr [ecx]        ; // TLS value (GC_Thread_Info*) into ecx
    add ecx, g_tls_offset_bytes

    ; // return if slot is inside the nursery
    sub  eax, dword ptr [ecx+8]     ; // ecx+8 is the start field in local nursery
    cmp  eax, local_nursery_size    ; // go to done if p_slot is in the local nursery
    jb   interior_done

IFDEF CONCURRENT
    mov  eax, dword ptr [esp+4]     ; // p_slot into eax
    lea  edx, dword ptr [esp+8]     ; // value into edx

    push ebx                        ; // save ebx
    mov  ebx, dword ptr [esp+24]    ; // Pillar task * into ebx
    push eax
    mov  eax, dword ptr [esp+20]    ; // offset
    push eax
    push edx
    push ecx

    mov  eax, esp
    push 0
    push 4
    push eax
    lea  eax, unmanaged_mark_phase
    push eax
    call prtInvokeUnmanagedFunc@16
    add  esp, 16
    pop  ebx

    ret 24
ENDIF ; CONCURRENT
gc_cas_write_interior_ref_p_prt_nonconcurrent_section::

    mov  edx, dword ptr [esp+8]       ; // value into edx
    ; // return if value is outside the nursery
    sub  edx, dword ptr [ecx+8]
    cmp  edx, local_nursery_size
    jae  interior_done

    push ebx                          ; // save ebx
    mov  ebx, dword ptr [esp+24]      ; // Pillar task * into ebx
    lea  edx, [esp+12]
    push dword ptr [esp+16]
    push edx
    push ecx

    mov  eax, esp
    push 0
    push 3
    push eax
    mov  eax, unmanaged_add_entry_interior
    push eax
    call prtInvokeUnmanagedFunc@16
    add  esp, 12
    pop  ebx
interior_done:
    ; // write value into *p_slot
    mov  ecx, dword ptr [esp+4]       ; // p_slot into ecx
    mov  edx, dword ptr [esp+8]       ; // value into edx
    mov  eax, dword ptr [esp+16]      ; // comperand into eax
    lock cmpxchg [ecx], edx

    ret  24
gc_cas_write_interior_ref_p_prt_end::
gc_cas_write_interior_ref_p_prt@24 ENDP


; -----------------------------------------------------------------------
; ------------------- GENERATIONAL WRITE BARRIERS -----------------------
; -----------------------------------------------------------------------

PUBLIC gc_heap_slot_gen_write_ref_p@12
PUBLIC gc_heap_slot_gen_write_ref_p_end
gc_heap_slot_gen_write_ref_p@12 PROC EXPORT
    ; esp+4  = base;
    ; esp+8  = p_slot
    ; esp+12 = value
    mov  eax, dword ptr [esp+8]       ; // p_slot into eax
    mov  ecx, eax
    and  ecx, 0FFff0000h              ; // pointer to start of GC block
    mov  ecx, [ecx]                   ; // value of generation field...0 is young gen, 1 is old
    cmp  ecx, 0
    jz   gc_heap_slot_gen_write_ref_p_done

    mov  edx, dword ptr [esp+12]      ; // value into eax
    cmp  edx, 0
    jz   gc_heap_slot_gen_write_ref_p_done
    mov  ecx, edx
    and  ecx, 0FFff0000h              ; // pointer to start of GC block
    mov  ecx, [ecx]                   ; // value of generation field...0 is young gen, 1 is old
    cmp  ecx, 0
    jnz  gc_heap_slot_gen_write_ref_p_done

    push eax                          ; // push slot
    push edx                          ; // push value
    mov  ecx, ebx                     ; // Pillar task * into ecx
    add  ecx, 4                       ; // Go to TLS field in PrtTask
    mov  ecx, dword ptr [ecx]         ; // TLS value (GC_Thread_Info*) into ecx
    add  ecx, g_tls_offset_bytes
    push ecx
    call add_gen_rs
    add  esp, 12                      ; // bypass thread pointer and base args

gc_heap_slot_gen_write_ref_p_done:
    ; // write value into *p_slot
    mov  eax, dword ptr [esp+8]       ; // p_slot into eax
    mov  edx, dword ptr [esp+12]      ; // value into edx
    mov  dword ptr [eax], edx         ; // *p_slot = value

    ret  12
gc_heap_slot_gen_write_ref_p_end::
gc_heap_slot_gen_write_ref_p@12 ENDP


; -----------------------------------------------------------------------

PUBLIC gc_heap_slot_gen_write_ref_p_prt@20
PUBLIC gc_heap_slot_gen_write_ref_p_prt_end
gc_heap_slot_gen_write_ref_p_prt@20 PROC EXPORT
    ; esp+4  = base;
    ; esp+8  = p_slot
    ; esp+12 = value
    ; esp+16 = taskHandle
    ; esp+20 = prev_frame

    push dword ptr [esp+8]            ; // go to done if the slot is not in the heap
    call global_is_in_heap
    add  esp, 4
    cmp  eax, 0
    jz   gc_heap_slot_gen_write_ref_p_prt_done

    mov  eax, dword ptr [esp+8]       ; // p_slot into eax
    mov  ecx, eax
    and  ecx, 0FFff0000h              ; // pointer to start of GC block
    mov  ecx, [ecx]                   ; // value of generation field...0 is young gen, 1 is old
    cmp  ecx, 0
    jz   gc_heap_slot_gen_write_ref_p_prt_done

    push dword ptr [esp+12]           ; // go to done if the value is not in the heap
    call global_is_in_heap
    add  esp, 4
    cmp  eax, 0
    jz   gc_heap_slot_gen_write_ref_p_prt_done

    mov  edx, dword ptr [esp+12]      ; // value into eax
    mov  ecx, edx
    and  ecx, 0FFff0000h              ; // pointer to start of GC block
    mov  ecx, [ecx]                   ; // value of generation field...0 is young gen, 1 is old
    cmp  ecx, 0
    jnz  gc_heap_slot_gen_write_ref_p_prt_done

    push dword ptr [esp+8]            ; // push slot
    mov  ecx, dword ptr [esp+20]      ; // Pillar task * into ecx
    add  ecx, 4                       ; // Go to TLS field in PrtTask
    mov  ecx, dword ptr [ecx]         ; // TLS value (GC_Thread_Info*) into ecx
    add  ecx, g_tls_offset_bytes
    push ecx
    call add_gen_rs
    add  esp, 8                       ; // bypass thread pointer and base args

gc_heap_slot_gen_write_ref_p_prt_done:
    ; // write value into *p_slot
    mov  eax, dword ptr [esp+8]       ; // p_slot into eax
    mov  edx, dword ptr [esp+12]      ; // value into edx
    mov  dword ptr [eax], edx         ; // *p_slot = value

    ret 20
gc_heap_slot_gen_write_ref_p_prt_end::
gc_heap_slot_gen_write_ref_p_prt@20 ENDP

; -----------------------------------------------------------------------

PUBLIC gc_heap_slot_gen_write_interior_ref_p_prt@20
PUBLIC gc_heap_slot_gen_write_interior_ref_p_prt_end
gc_heap_slot_gen_write_interior_ref_p_prt@20 PROC EXPORT
    ; esp+4  = p_slot
    ; esp+8  = value
    ; esp+12 = offset
    ; esp+16 = taskHandle
    ; esp+20 = prev_frame

    push dword ptr [esp+4]            ; // go to done if the slot is not in the heap
    call global_is_in_heap
    add  esp, 4
    cmp  eax, 0
    jz   gc_heap_slot_gen_write_interior_ref_p_prt_done

    mov eax, dword ptr [esp+4]        ; // p_slot into eax
    mov ecx, eax
    and ecx, 0FFff0000h               ; // pointer to start of GC block
    mov ecx, [ecx]                    ; // value of generation field...0 is young gen, 1 is old
    cmp ecx, 0
    jz  gc_heap_slot_gen_write_interior_ref_p_prt_done

    push dword ptr [esp+8]            ; // go to done if the value is not in the heap
    call global_is_in_heap
    add  esp, 4
    cmp  eax, 0
    jz   gc_heap_slot_gen_write_interior_ref_p_prt_done

    mov  edx, dword ptr [esp+8]       ; // value into eax
    mov  ecx, edx
    and  ecx, 0FFff0000h              ; // pointer to start of GC block
    mov  ecx, [ecx]                   ; // value of generation field...0 is young gen, 1 is old
    cmp  ecx, 0
    jnz  gc_heap_slot_gen_write_interior_ref_p_prt_done

    push dword ptr [esp+4]            ; // push slot
    mov  ecx, dword ptr [esp+20]      ; // Pillar task * into ecx
    add  ecx, 4                       ; // Go to TLS field in PrtTask
    mov  ecx, dword ptr [ecx]         ; // TLS value (GC_Thread_Info*) into ecx
    add  ecx, g_tls_offset_bytes
    push ecx
    call add_gen_rs
    add  esp, 8                       ; // bypass thread pointer and base args

gc_heap_slot_gen_write_interior_ref_p_prt_done:
    ; // write value into *p_slot
    mov  eax, dword ptr [esp+8]       ; // p_slot into eax
    mov  edx, dword ptr [esp+12]      ; // value into edx
    mov  dword ptr [eax], edx         ; // *p_slot = value

    ret 20
gc_heap_slot_gen_write_interior_ref_p_prt_end::
gc_heap_slot_gen_write_interior_ref_p_prt@20 ENDP






; -----------------------------------------------------------------------

IFDEF PUB_PRIV
PUBLIC cph_destructor@0
cph_destructor@0 PROC EXPORT
    mov edx, [edx+8]
    push edx
    call prtFatCutTo@4
cph_destructor@0 ENDP
ENDIF ; PUB_PRIV

_TEXT ENDS

end
